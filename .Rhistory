getSymbols("GOOGL")
mean(annualReturn(GOOGL))
getSymbols("PG")
mean(annualReturn(PG))
getSymbols("VZ")
mean(annualReturn(VZ))
getSymbols("PFE")
mean(annualReturn(PFE))
getSymbols("CVX")
mean(annualReturn(CVX))
getSymbols("MRK")
mean(annualReturn(MRK))
getSymbols("KO")
mean(annualReturn(KO))
getSymbols("HD")
mean(annualReturn(HD))
getSymbols("INTC")
mean(annualReturn(INTC))
getSymbols("CMCSA")
mean(annualReturn(CMCSA))
getSymbols("BAX")
getSymbols("BAC")
mean(annualReturn(BAC))
getSymbols("PEP")
mean(annualReturn(PEP))
getSymbols("PM")
mean(annualReturn(PM))
getSymbols("NVDA")
mean(annualReturn(NVDA))
getSymbols("FIS")
mean(annualReturn(FIS))
getSymbols("EQIX")
mean(annualReturn(EQIX))
getSymbols("NWL")
mean(annualReturn(NWL))
getSymbols("ROST")
mean(annualReturn(ROST))
getSymbols("FISV")
mean(annualReturn(FISV))
getSymbols("EW")
mean(annualReturn(EW))
getSymbols("NEM")
mean(annualReturn(NEM))
getSymbols("EA")
mean(annualReturn(EA))
getSymbols("TSN")
mean(annualReturn(TSN))
getSymbols("DLTR")
mean(annualReturn(DLTR))
getSymbols("WEC")
mean(annualReturn(WEC))
getSymbols("CAG")
mean(annualReturn(CAG))
getSymbols("CERN")
mean(annualReturn(CERN))
getSymbols("ES")
mean(annualReturn(ES))
getSymbols("NSLN")
getSymbols("NSLN")
getSymbols("NLSN")
mean(annualReturn(NLSN))
getSymbols("O")
mean(annualReturn(O))
getSymbols("APH")
mean(annualReturn(APH))
getSymbols("DPS")
mean(annualReturn(DPS))
getSymbols("TAP")
mean(annualReturn(TAP))
getSymbols("SJM")
mean(annualReturn(SJM))
getSymbols("MCO")
mean(annualReturn(MCO))
getSymbols("DTE")
mean(annualReturn(DTE))
getSymbols("ROP")
mean(annualReturn(ROP))
getSymbols("CLX")
)
mean(annualReturn(CLX))
library("ADGofTest", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("cluster", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("codetools", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("compiler", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("copula", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("data.table", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("htmltools", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("jsonlite", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("labeling", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("lattice", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("markdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("PerformanceAnalytics", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("PortfolioAnalytics", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("PortRisk", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("quadprog", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("Quandl", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("quantmod", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("quantreg", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("rmarkdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("stats4", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("survival", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("tools", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("tseries", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
mtcars
fit<- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(fit)$coefficient
fit2<- lm(mpg ~ factor(cyl), data = mtcars)
cyl_8<- data.frame(summary(fit)$coef[3], summary(fit2)$coef[3]; names(cyl_8) = c("with wt", "no wt"); rownames(cyl_8) = "cyl 8 est.")
cyl_8<- data.frame(summary(fit)$coef[3], summary(fit2)$coef[3]; names(cyl_8) = c("with wt", "no wt"); rownames(cyl_8) = "cyl 8 est."
fit2<- lm(mpg ~ as.factor(cyl), data = mtcars)
summary(fit2)$coef[3]
summary(fit)$coef[3]
fit_inter<- lm(mpg ~ factor(cyl) * wt, data = mtcars)
anova(fit, fit_inter, test = "Chisq")
fit3<- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
fit3
summary(fit3)$coef[3]
summary(fit3)$coefficient
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit_diag<- lm( x ~ y)
hatvalues(fit_diag)
dfbeta(fit_diag)
hatvalues(fit_diag)[which.max(abs(hatvalues(fit_diag)))]
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
influence.measures(fit_diag)$infmat[which.max(abs(influence.measures(fit_diag$infmat[, 2])), 2]
dbetas(fit_diag)
dfbetas(fit_diag)
dfbetas(fit_diag[, 2])
fit_diag<- lm( y ~x)
dfbetas(fit_diag)[,2]
getSymbols("AMD")
mean(annualReturn(AMD))
getSymbols("MSCC")
mean(annualReturn(MSCC))
getSymbols("GPT")
mean(annualReturn(GPT))
getSymbols("HR")
mean(annualReturn(HR))
getSymbols("CW")
mean(annualReturn(CE))
mean(annualReturn(CW))
getSymbols("FICO")
mean(annualReturn(FICO))
getSymbols("IDA")
mean(annualReturn(IDA))
getSymbols("POR")
mean(annualReturn(POR))
getSymbols("MMS")
mean(annualReturn(MMS))
getSymbols("AZPN")
mean(annualReturn(AZPN))
getSymbols("MPW")
mean(annualReturn(MPW))
getSymbols("TDY")
mean(annualReturn(TDY))
getSymbols("PRXL")
mean(annualReturn(PRXL))
getSymbols("XPO")
mean(annualReturn(XPO))
getSymbols("HLS")
mean(annualReturn(HLS))
getSymbols("HZNP")
mean(annualReturn(HZNP))
getSymbols("OLN")
mean(annualReturn(OLN))
getSymbols("PB")
mean
mean(annualReturn(PB))
getSymbols("PVTB")
mean(annualReturn(PVTB))
getSymbols("CAVM")
mean(annualReturn(CAVM))
getSymbols("UMPQ")
mean(annualReturn(UMPQ))
getSymbols("TTWO")
mean(annualReturn(TTWO))
getSymbols("ISBC")
mean(annualReturn(ISBC))
getSymbols("EME")
mean(annualReturn(EME))
getSymbols("WBS)"
)
getSymbols("WBS")
mean(annualReturn(WBS))
setwd("~/Johns Hopkins Data Science Cert/Machine Learning")
library("AppliedPredictiveModeling", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("ADGofTest", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("bitops", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("boot", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("car", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("caretEnsemble", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("caTools", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
detach("package:caTools", unload=TRUE)
library("chron", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("cluster", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("coda", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("codetools", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("coefplot", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("coin", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("colorspace", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("combinat", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("copula", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("CORElearn", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("corrplot", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("curl", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("data.table", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("dglm", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("e1071", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("elasticnet", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("ellipse", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("evaluate", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("evd", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("forecast", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("formatR", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("fracdiff", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("gbm", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("grid", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("Hmisc", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("htmltools", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("ISLR", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
detach("package:ISLR", unload=TRUE)
library("httr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("jsonlite", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("iterators", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("kernlab", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("KernSmooth", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("klaR", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("labeling", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("latticeExtra", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("lme4", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("markdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("manipulate", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("MatrixModels", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("mcmc", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("MCMCpack", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("mgcv", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("minqa", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("modeltools", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("multcomp", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("nnet", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("pbkrtest", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("pcaPP", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("PerformanceAnalytics", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("pgmm", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("PortfolioAnalytics", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("PortRisk", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("qtl", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("quadprog", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("Quandl", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("quantmod", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("quantreg", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("randomForest", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("RANN", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("rattle", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
knit("Peterson - Machine Learning Project.Rmd")
knit("Peterson - Machine Learning Project.Rmd")
test_data = read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")
summary(test_data)
library(caret); data(test_data)
inTrain <- createDataPartition(y=test_data$classe,p=0.60, list=FALSE)
test <- test_data[inTrain,]
testing <- train_data[-inTrain,]
dim(testing)
library(caret); data(test_data)
inTrain <- createDataPartition(y=test_data$classe,p=0.60, list=FALSE)
test <- test_data[inTrain,]
testing <- test_data[-inTrain,]
dim(testing)
inTrain <- createDataPartition(y=test_data$classe,p=0.60, list=FALSE)
library(caret); data(test_data)
inTrain <- createDataPartition(y=test_data$classe,p=0.60, list=FALSE)
training <- test_data[inTrain,]
testing <- test_data[-inTrain,]
dim(testing)
library(caret); data(test_data)
inTrain <- createDataPartition(y=test_data,p=0.60, list=FALSE)
training <- test_data[inTrain,]
testing <- test_data[-inTrain,]
dim(testing)
test_data_NZV<- nearZeroVar(testing, saveMetrics = TRUE)
test_data_NZV <- names(testing) %in% c("new_window", "kurtosis_roll_belt", "kurtosis_picth_belt",
"kurtosis_yaw_belt", "skewness_roll_belt", "skewness_roll_belt.1", "skewness_yaw_belt",
"max_yaw_belt", "min_yaw_belt", "amplitude_yaw_belt", "avg_roll_arm", "stddev_roll_arm",
"var_roll_arm", "avg_pitch_arm", "stddev_pitch_arm", "var_pitch_arm", "avg_yaw_arm",
"stddev_yaw_arm", "var_yaw_arm", "kurtosis_roll_arm", "kurtosis_picth_arm",
"kurtosis_yaw_arm", "skewness_roll_arm", "skewness_pitch_arm", "skewness_yaw_arm",
"max_roll_arm", "min_roll_arm", "min_pitch_arm", "amplitude_roll_arm", "amplitude_pitch_arm",
"kurtosis_roll_dumbbell", "kurtosis_picth_dumbbell", "kurtosis_yaw_dumbbell", "skewness_roll_dumbbell",
"skewness_pitch_dumbbell", "skewness_yaw_dumbbell", "max_yaw_dumbbell", "min_yaw_dumbbell",
"amplitude_yaw_dumbbell", "kurtosis_roll_forearm", "kurtosis_picth_forearm", "kurtosis_yaw_forearm",
"skewness_roll_forearm", "skewness_pitch_forearm", "skewness_yaw_forearm", "max_roll_forearm",
"max_yaw_forearm", "min_roll_forearm", "min_yaw_forearm", "amplitude_roll_forearm",
"amplitude_yaw_forearm", "avg_roll_forearm", "stddev_roll_forearm", "var_roll_forearm",
"avg_pitch_forearm", "stddev_pitch_forearm", "var_pitch_forearm", "avg_yaw_forearm",
"stddev_yaw_forearm", "var_yaw_forearm")
testing <- testing[!test_data_NZV]
dim(testing)
testing<- testing[c(-1)]
final_testing <- testing
for(i in 1:length(testing)) {
if( sum( is.na( testing[, i] ) ) /nrow(testing) >= .6 ) {
for(j in 1:length(final_testing)) {
if( length( grep(names(testing[i]), names(final_testing)[j]) ) ==1)  {                 final_testing <- final_testing[ , -j]
}
}
}
}
dim(final_testing)
testing<- final_testing
rm(final_testing)
clean_testing<- colnames(testing)
clean_testing_2<- colnames(testing[, -58])
testing<- testing[clean_testing]
testing_2<- testing_2[clean_testing_2]
dim(testing)
for (i in 1:length(testing) ) {
for(j in 1:length(training)) {
if( length( grep(names(training[i]), names(testing)[j]) ) ==1)  {
class(testing[j]) <- class(training[i])
}
}
}
testing <- rbind(training[2, -58] , testing)
testing <- testing[-1,]
modelFit <- rpart(classe ~.,data=testing, method="class")
modelFit
fancyRpartPlot(modelFit)
plot(modelFit)
train_data = read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
summary(train_data)
library(caret); data(train_data)
inTrain <- createDataPartition(y=train_data$classe,p=0.60, list=FALSE)
training <- train_data[inTrain,]
testing <- train_data[-inTrain,]
dim(training); dim(testing)
train_data_NZV<- nearZeroVar(training, saveMetrics = TRUE)
train_data_NZV <- names(training) %in% c("new_window", "kurtosis_roll_belt", "kurtosis_picth_belt",
"kurtosis_yaw_belt", "skewness_roll_belt", "skewness_roll_belt.1", "skewness_yaw_belt",
"max_yaw_belt", "min_yaw_belt", "amplitude_yaw_belt", "avg_roll_arm", "stddev_roll_arm",
"var_roll_arm", "avg_pitch_arm", "stddev_pitch_arm", "var_pitch_arm", "avg_yaw_arm",
"stddev_yaw_arm", "var_yaw_arm", "kurtosis_roll_arm", "kurtosis_picth_arm",
"kurtosis_yaw_arm", "skewness_roll_arm", "skewness_pitch_arm", "skewness_yaw_arm",
"max_roll_arm", "min_roll_arm", "min_pitch_arm", "amplitude_roll_arm", "amplitude_pitch_arm",
"kurtosis_roll_dumbbell", "kurtosis_picth_dumbbell", "kurtosis_yaw_dumbbell", "skewness_roll_dumbbell",
"skewness_pitch_dumbbell", "skewness_yaw_dumbbell", "max_yaw_dumbbell", "min_yaw_dumbbell",
"amplitude_yaw_dumbbell", "kurtosis_roll_forearm", "kurtosis_picth_forearm", "kurtosis_yaw_forearm",
"skewness_roll_forearm", "skewness_pitch_forearm", "skewness_yaw_forearm", "max_roll_forearm",
"max_yaw_forearm", "min_roll_forearm", "min_yaw_forearm", "amplitude_roll_forearm",
"amplitude_yaw_forearm", "avg_roll_forearm", "stddev_roll_forearm", "var_roll_forearm",
"avg_pitch_forearm", "stddev_pitch_forearm", "var_pitch_forearm", "avg_yaw_forearm",
"stddev_yaw_forearm", "var_yaw_forearm")
training <- training[!train_data_NZV]
dim(training)
training<- training[c(-1)]
final_training <- training
for(i in 1:length(training)) {
if( sum( is.na( training[, i] ) ) /nrow(training) >= .6 ) {
for(j in 1:length(final_training)) {
if( length( grep(names(training[i]), names(final_training)[j]) ) ==1)  {                 final_training <- final_training[ , -j]
}
}
}
}
dim(final_training)
training<- final_training
rm(final_training)
clean_training<- colnames(training)
clean_training_2<- colnames(training[, -58])
testing<- testing[clean_training]
testing_2<- testing_2[clean_training_2]
dim(testing)
for (i in 1:length(testing) ) {
for(j in 1:length(training)) {
if( length( grep(names(training[i]), names(testing)[j]) ) ==1)  {
class(testing[j]) <- class(training[i])
}
}
}
testing <- rbind(training[2, -58] , testing)
testing <- testing[-1,]
set.seed(32323)
folds <- createFolds(y=train_data$classe,k=10,list=TRUE,returnTrain=TRUE)
sapply(folds,length)
folds[[1]][1:10]
set.seed(32323)
folds <- createResample(y=train_data$classe,times=10,
list=TRUE)
sapply(folds,length)
folds[[1]][1:10]
modelFit <- rpart(classe ~.,data=training, method="class")
modelFit
library("rpart", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("rpart.plot", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
modelFit <- rpart(classe ~.,data=training, method="class")
modelFit
fancyRpartPlot(modelFit)
predict_perf<- predict(modelFit, testing, type = "class")
confusionMatrix(predict_perf, testing$classe)
plot(modelFit)
plot(modelFit2)
set.seed(2058)
fitControl <- trainControl(method = "repeatedcv",number = 5, repeats = 1)
gbmFit <- train(classe ~ ., data=training, method = "gbm",
trControl = fitControl,
verbose = FALSE)
gbmFinMod <- gbmFit$finalModel
gbmPredTest <- predict(gbmFit, newdata=testing)
gbmAccuracyTest <- confusionMatrix(gbmPredTest, testing$classe)
gbmAccuracyTest
plot(gbmFit, ylim=c(0.9, 1))
plot(gbmFit, ylim=c(0.5, 1))
plot(gbmFit, ylim=c(0.9, 1))
plot(gbmFit, ylim=c(0.95, 1))
plot(gbmFit, ylim=c(0.90, 1))
plot(gbmFit, ylim=c(0.80, 1))
predict_pef_final<- predict(modelFit2, testing, type = "class")
predict_pef_final
confusionMatrix(predict_perf2, testing$classe)
confusionMatrix(predict_perf, testing$classe)
predict_final<- predict(modelFit2, testing, type = "class")
predict_final
testing <- rbind(training[2, -58] , testing)
testing <- testing[-1,]
train_data = read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
test_data = read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")
summary(train_data)
summary(test_data)
library(caret); data(train_data)
inTrain <- createDataPartition(y=train_data$classe,p=0.60, list=FALSE)
training <- train_data[inTrain,]
testing <- train_data[-inTrain,]
dim(training); dim(testing)
train_data_NZV<- nearZeroVar(training, saveMetrics = TRUE)
training<- training[,train_data_NZV$nzv==FALSE]
train_data_NZV<- nearZeroVar(training, saveMetrics = TRUE)
training<- training[,train_data_NZV$nzv==FALSE]
test_data_NZV<- nearZeroVar(testing, saveMetrics = TRUE)
testing<- testing[, test_data_NZV$nzv==FALSE]
training<- training[c(-1)]
final_training <- training
for(i in 1:length(training)) {
if( sum( is.na( training[, i] ) ) /nrow(training) >= .6 ) {
for(j in 1:length(final_training)) {
if( length( grep(names(training[i]), names(final_training)[j]) ) ==1)  {                 final_training <- final_training[ , -j]
}
}
}
}
dim(final_training)
clean_training<- colnames(training)
clean_training_2<- colnames(training[, -58])
testing<- testing[clean_training]
testing_2<- testing_2[clean_training_2]
dim(testing)
clean_training<- colnames(training)
clean_training_2<- colnames(training[, -58])
testing<- testing[clean_training]
testing_2<- testing_2[clean_training_2]
dim(testing)
for (i in 1:length(testing) ) {
for(j in 1:length(training)) {
if( length( grep(names(training[i]), names(testing)[j]) ) ==1)  {
class(testing[j]) <- class(training[i])
}
}
}
testing <- rbind(training[2, -58] , testing)
testing <- testing[-1,]
set.seed(32323)
folds <- createFolds(y=train_data$classe,k=10,list=TRUE,returnTrain=TRUE)
sapply(folds,length)
folds[[1]][1:10]
set.seed(32323)
folds <- createResample(y=train_data$classe,times=10,
list=TRUE)
sapply(folds,length)
folds[[1]][1:10]
modelFit <- rpart(classe ~.,data=training, method="class")
modelFit
fancyRpartPlot(modelFit)
predict_perf<- predict(modelFit, testing, type = "class")
confusionMatrix(predict_perf, testing$classe)
modelFit2<- randomForest(classe ~., data = training)
predict_perf2<- predict(modelFit2, testing, type = "class")
confusionMatrix(predict_perf2, testing$classe)
plot(modelFit2)
set.seed(2058)
fitControl <- trainControl(method = "repeatedcv",number = 5, repeats = 1)
gbmFit <- train(classe ~ ., data=training, method = "gbm",
trControl = fitControl,
verbose = FALSE)
gbmFinMod <- gbmFit$finalModel
gbmPredTest <- predict(gbmFit, newdata=testing)
gbmAccuracyTest <- confusionMatrix(gbmPredTest, testing$classe)
gbmAccuracyTest
plot(gbmFit, ylim=c(0.80, 1))
predict_final<- predict(modelFit2, testing, type = "class")
predict_final
knit("Peterson - Machine Learning Project.Rmd")
setwd("~/MachineLeaningProject")
knit("Peterson - Machine Learning Project.Rmd")
